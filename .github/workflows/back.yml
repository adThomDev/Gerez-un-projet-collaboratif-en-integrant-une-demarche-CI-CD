name: Tests Backend

# Les déclencheurs du workflow
on: 
  # Lors d'un push 
  push:
    branches: ["main"]
  # Ou une pull-request
  pull_request:
    branches: ["main"]

jobs:
  backend-tests:
    # S'exécute sur une VM Ubuntu
    runs-on: ubuntu-latest

    # Etapes du workflow
    steps:
      # Récupère le code
      - name: Clone repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      # Configure le JDK
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'adopt'
          java-version: '11'

      # Lance les tests dans le back 
      # Clean verify => nettoie, compile, execute et génère
      - name: Build and tests Maven
        run: mvn clean verify
        working-directory: ./back

      # Archive les rapports sous forme d'artifact
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: back/target/site/jacoco

      # Restaure les fichiers depuis le cache 
      - name: Cache SonarQube packages
        uses: actions/cache@v4
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2

      # Lance l'analyse SonarCloud
      - name: SonarCloud Analysis
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        working-directory: ./back
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=adThomDev_Gerez-un-projet-collaboratif-en-integrant-une-demarche-CI-CD -Dsonar.projectName=back-CI-CD -Dsonar.organization=adthomdev